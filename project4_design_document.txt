             +-------------------------+
             |         CS 140          |
             | PROJECT 4: FILE SYSTEMS |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

김동욱 (freezing16@unist.ac.kr)
이강준 (suri7897@unist.ac.kr)

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

             INDEXED AND EXTENSIBLE FILES
             ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


struct inode_disk
  {
    off_t length;                       
    unsigned magic;    

// below here, it is newly added.   
             
    block_sector_t direct_block[MAX_DIRECT_IDX];// direct block table
    block_sector_t indirect_block_sec; // entry offset of first indirect block
    block_sector_t double_indirect_block_sec; // entry offset of second indirect block.
  };

-> Stores metadata and block pointers for files using direct, indirect, and double indirect addressing.

enum direct_method //* indicate the method to point disk block
{
  DIRECT, //* use direct block
  INDIRECT, //* use indirect block
  DOUBLE_INDIRECT, //* use double indirect block
  OUT_LIMIT //* wrong offset
};

-> Specifies the method used to locate a data block within an inode.

struct sector_location {
  enum direct_method method; // store method of access in blocks
  int first_idx;
  int second_idx;
}; 

-> Represents the path to a specific block in the file, supporting all three block types.

struct inode_indirect_block {
  block_sector_t indirect_block[MAX_INDIRECT_IDX];
};

-> Used to store block pointers in indirect and double indirect addressing schemes.

struct inode 
  {
    ....
    struct lock inode_lock; // lock for synchronization for file_growth, disk access.
  };


>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.


In direct block table, it can store 123 blocks.
By indirect method, 128 blocks can be pointed.
Also, by double_indirect, 128 * 128 blocks can be allocated.
So, 16,635 blocks can be supported, so size of
16,635 blocks * 512 bytes / block ≈ 8.1MB of file can be supported.


---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

To avoid race condition, we added inode_lock in the structure of inode.
By applying inode in inode_write_at, and inode_read_at, we can ensure that other cannot access same inode.
In particular, inode_wrie_at calls inode_grow when extending file, which allocates block and update metadata.
So, by acquiring inode_lock, we can ensure that only one can modify the inode at same time.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

To prevent the race condition we use inode_lock.
Since both inode_read_at and inode_write_at requires this lock, so read cannot occure in the middle of write.
Also, when allocating new blocks, we initialize this with zeros via block_write before updating pointers.
So, race condition could be avoided.


>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

In Project 2, the lock implementation uses a FIFO waiters list,
which ensures that threads acquire the lock in the order they began waiting.
This prevents starvation and ensures fairness between readers and writers.
So, since we used lock for synchronization, so fairness is provided.


---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

Yes, we used a multilevel index structure. Alternatives like FAT or 
linked allocation were considered, but FAT requires a buffer cache, 
which is beyond the scope of Project 4, and linked allocation does not support efficient random access. 
So we chose multilevel indexing instead.

We included doubly indirect blocks because the Pintos documentation states 
that the system partition will not exceed 8MB, 
and doubly indirect indexing is sufficient to support that size.

This structure allows efficient access to small files through direct blocks, 
while supporting larger files when needed. It avoids unnecessary overhead 
by allocating index blocks only when required.
However, accessing large files through doubly indirect blocks involves multiple disk reads, 
and the overall implementation is more complex than simpler schemes.



==== Peer Evaluation ====

+----------------------------+---------------------------------+

|            Name            |          Contribution           |

+----------------------------+---------------------------------+

| 김동욱                     | 40% : Implemented draft structure of project4, debugging overall codes.

+----------------------------+---------------------------------+

| 이강준                     | 60% : Implemented file growth, inode_lock and debugging overall codes.

+----------------------------+---------------------------------+
